#include <Servo.h>
#include <Pixy2.h>
Pixy2 pixy;
Servo myServo;

// Balloon signature IDs
const int RED_SIGNATURE = 1;  // Adjust as per Pixy settings
const int BLUE_SIGNATURE = 2;
const int BAD_GUY = BLUE_SIGNATURE;
const int GOOD_GUY = RED_SIGNATURE;

// const int BAD_GUY = RED_SIGNATURE;
// const int GOOD_GUY = BLUE_SIGNATURE;

const int servoPin = 8;
const int backwardAngle = 0;
const int forwardAngle = 180;
bool turnedLeft = false;
bool turnedRight = false;

// Pin Definitions
#define IR_FRONT_LEFT 39 // Front left IR sensor pin
#define IR_FRONT_RIGHT 41 // Front right IR sensor pin
#define IR_BACK_RIGHT 28    // Back IR sensor pin
#define IR_BACK_LEFT 48 //Back IR sensor pin
#define TRIG_PIN_FRONT 2    // Ultrasonic sensor TRIG pin
#define ECHO_PIN_FRONT 3    // Ultrasonic sensor ECHO pin
#define TRIG_PIN_R 12   // Ultrasonic sensor TRIG pin
#define ECHO_PIN_R 11   // Ultrasonic sensor ECHO pin
#define TRIG_PIN_L 42     // Ultrasonic sensor TRIG pin
#define ECHO_PIN_L 44   // Ultrasonic sensor ECHO pin




// Motor control pins
#define ENA 4 // LEFT MOTOR
#define ENB 5 // RIGHT MOTOR
#define IN1 45 // LEFT MOTOR
#define IN2 47
#define IN3 35 // RIGHT MOTOR
#define IN4 31

// Speed setting
#define MOTOR_SPEED 85

// Define states for the state machine
enum RobotState {
  FORWARD,
  BACKWARD,
  BACK_AFTER_TURN_LEFT,
  BACK_AFTER_TURN_RIGHT,
  TURN_LEFT,
  TURN_RIGHT,
  BACK_SONAR,
  BOX_FR, //wall on front and right side
  BOX_FL, //wall on front and left side
  ATTACK
};

enum AttackSubState {
  ATTACK_ALIGN,
  REVERSE_LEFT,
  REVERSE_RIGHT
};

// Current state
RobotState currentState = FORWARD;
AttackSubState currentAttackSubState = ATTACK_ALIGN;

//Sensor Data global variables
bool irFrontLeft;
bool irFrontRight;
bool irBackLeft;
bool irBackRight;
float distance_FRONT;
float distance_R;
float distance_L;
bool balloon_detect;
bool multiturnFlag = false;
bool turnLeftFlag = true; // Start by turning left initially
int balloonX = -1;

// Function to read the ultrasonic sensor
float getDistance(int TRIG_PIN, int ECHO_PIN) {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  long duration = pulseIn(ECHO_PIN, HIGH);
  float distance = (duration / 2.0) * 0.0343; // Calculate distance in cm
  return distance;
}

// Motor control functions
void stopMotors() {
  analogWrite(ENA, LOW);
  analogWrite(ENB, LOW);
}

void moveForward(int speed, int speed2) {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  analogWrite(ENA, speed);
  analogWrite(ENB, speed2);
}

void moveBackward(int speed, int speed2) {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  analogWrite(ENA, speed+30);
  analogWrite(ENB, speed2+30);
}

void turnLeft(int speed, int speed2) {
  digitalWrite(IN1, LOW); // LEFT
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, LOW); // RIGHT
  digitalWrite(IN4, HIGH);
  analogWrite(ENA, speed+30);
  analogWrite(ENB, speed2 + 80);
}

void turnRight(int speed, int speed2) {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  analogWrite(ENA, speed + 80);
  analogWrite(ENB, speed2+30);
}

//Detect balloon location function
bool detectBalloon(int &xcoord) {
  pixy.ccc.getBlocks(); // Retrieve blocks from PixyCam
  Serial.print("number of blocks: ");
  Serial.println(pixy.ccc.numBlocks);
  if (pixy.ccc.numBlocks > 0) {  // If any objects are detected
    for (int i = 0; i < pixy.ccc.numBlocks; i++) {
      int signature = pixy.ccc.blocks[i].m_signature;
      // Check if the detected object matches the red balloon signature
      if (signature == BAD_GUY) {
        xcoord = pixy.ccc.blocks[i].m_x;  // Capture the X-coordinate of the red balloon
        // Optional: Debug information
        // int width = pixy.ccc.blocks[i].m_width;
        // int height = pixy.ccc.blocks[i].m_height;
        // Serial.println("Red balloon detected!");
        // Serial.print("X-coordinate: ");
        // Serial.println(xcoord);
        // Serial.print("Size - Width: ");
        // Serial.print(width);
        // Serial.print(" Height: ");
        // Serial.println(height);
        return true;  // Red balloon detected
      }
    }
  }
  return false;  // No red balloon detected
}

//Read all sensors function
void SensorUpdate() {
  // Read IR sensor states
  irFrontLeft = digitalRead(IR_FRONT_LEFT);
  irFrontRight = digitalRead(IR_FRONT_RIGHT);
  irBackLeft = digitalRead(IR_BACK_LEFT);
  irBackRight = digitalRead(IR_BACK_RIGHT);
  // Read ultrasonic sensor distance
  distance_FRONT = getDistance(TRIG_PIN_FRONT,ECHO_PIN_FRONT);
  distance_R = getDistance(TRIG_PIN_R,ECHO_PIN_R);
  distance_L = getDistance(TRIG_PIN_L,ECHO_PIN_L);
  balloon_detect = detectBalloon(balloonX);
}

void setup() {
  Serial.begin(9600);
  pixy.init();
  Serial.println("Pixy camera initialized.");
  pixy.setLamp(0,0);
  Serial.print("Bad guy: ");
  Serial.println(BAD_GUY);
  myServo.attach(servoPin);
  myServo.write(backwardAngle);

  // Motor pins setup
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);

  // Sensor pins setup
  pinMode(IR_FRONT_LEFT, INPUT);
  pinMode(IR_FRONT_RIGHT, INPUT);
  pinMode(IR_BACK_LEFT, INPUT);
  pinMode(IR_BACK_RIGHT, INPUT);
  pinMode(TRIG_PIN_FRONT, OUTPUT);
  pinMode(ECHO_PIN_FRONT, INPUT);
  pinMode(TRIG_PIN_R, OUTPUT);
  pinMode(ECHO_PIN_R, INPUT);
  pinMode(TRIG_PIN_L, OUTPUT);
  pinMode(ECHO_PIN_L, INPUT);
}

void loop() {
  SensorUpdate();
  // Print sensor states to the Serial Monitor
  Serial.print("IR Front Left: ");
  Serial.print(irFrontLeft);
  Serial.print(" | IR Front Right: ");
  Serial.print(irFrontRight);
  Serial.print(" | Distance: ");
  Serial.print(distance_FRONT);
  Serial.print(" cm");
  Serial.print(" | Right: ");
  Serial.print(distance_R);
  Serial.print(" | left: ");
  Serial.println(distance_L);
  Serial.println("current state "+currentState);
  Serial.println(balloon_detect);

    // State machine logic
    switch (currentState) {
         case FORWARD:
          Serial.println("case forward");
            for (unsigned long startTime = millis(); millis() - startTime < 5000; ) {
              Serial.println("Case Forward For Loop");
                  SensorUpdate();
                  Serial.print("balloon detect is ");
                  Serial.println(balloon_detect);
                  // irFrontLeft = digitalRead(IR_FRONT_LEFT);
                  // irFrontRight = digitalRead(IR_FRONT_RIGHT);
                  // irBackLeft = digitalRead(IR_BACK_LEFT);
                  // irBackRight = digitalRead(IR_BACK_RIGHT);
                  // // Read ultrasonic sensor distance
                  // distance_FRONT = getDistance(TRIG_PIN_FRONT,ECHO_PIN_FRONT);
                  // distance_R = getDistance(TRIG_PIN_R,ECHO_PIN_R);
                  // distance_L = getDistance(TRIG_PIN_L,ECHO_PIN_L);
                  // balloon_detect = detectBalloon(balloonX);
             if (balloon_detect == true) {
              currentState = ATTACK;
              Serial.println("Going to ATTACK");
              break;
            } else if (irFrontLeft == 0 && irFrontRight == 0) {
                currentState = BACKWARD;
                stopMotors();
                break;
            } else if (irFrontLeft == 0) {
                currentState = BACK_AFTER_TURN_RIGHT;
                stopMotors();
                break;
            } else if (irFrontRight == 0) {
                currentState = BACK_AFTER_TURN_LEFT;
                stopMotors();
                break;
            } else if (irBackLeft == 0 && irBackRight == 0) {
                currentState = FORWARD;
                break;
            } else if (distance_FRONT < 20) {
                stopMotors();
                currentState = BACKWARD;
                break;
            } else if (distance_FRONT < 20 && distance_R < 20) {
              currentState = BOX_FR;
              stopMotors();
              break;
            } else if (distance_FRONT < 20 && distance_L < 20){
              currentState = BOX_FL;
              stopMotors();
              break;
            } else if (irBackLeft == 0) {
              currentState = TURN_LEFT;
              stopMotors();
              break;
            } else if (irBackRight == 0) {
              currentState = TURN_RIGHT;
              stopMotors();
              break;
            } else {
                moveForward(MOTOR_SPEED, MOTOR_SPEED);
                Serial.print("I'm here 2");
            }
          }
            if (currentState == FORWARD) {
              currentState = BACKWARD;
            }
            break;

        case BOX_FR:
            Serial.println("Case BOX FR");
            for (unsigned long startTime = millis(); millis() - startTime < 900; ) {
              //if (irFrontLeft == 0 && irFrontRight == 0) {
                //currentState = BACKWARD;
                //break;
              //} else if (irFrontLeft == 0) {
                  //currentState = BACK_AFTER_TURN_RIGHT;
                  //break;
              //} else if (irFrontRight == 0) {
                  //currentState = BACK_AFTER_TURN_LEFT;
                  //break;
              if (irBackLeft == 0 && irBackRight ==0) {
                  currentState = FORWARD;
                  break;
              //} else if (distance < 20) {
                  //currentState = BACK_SONAR;
                  //break;
              } else if (irBackLeft == 0) {
                currentState = TURN_LEFT;
                break;
              } else if (irBackRight == 0) {
                currentState = TURN_RIGHT;
                break;
              } else {
                  moveBackward(MOTOR_SPEED, MOTOR_SPEED);
                }
            }
            if (currentState == BOX_FR) {
              currentState = TURN_RIGHT;
            }
            break;

        case BOX_FL:
            Serial.println("Case BOX FL");
            for (unsigned long startTime = millis(); millis() - startTime < 900; ) {
              //if (irFrontLeft == 0 && irFrontRight == 0) {
                //currentState = BACKWARD;
                //break;
              //} else if (irFrontLeft == 0) {
                  //currentState = BACK_AFTER_TURN_RIGHT;
                  //break;
              //} else if (irFrontRight == 0) {
                  //currentState = BACK_AFTER_TURN_LEFT;
                  //break;
              if (irBackLeft == 0 && irBackRight == 0) {
                  currentState = FORWARD;
                  break;
              } else if (irBackLeft == 0) {
                currentState = TURN_LEFT;
                break;
              } else if (irBackRight == 0) {
                currentState = TURN_RIGHT;
                break;
              //} else if (distance < 20) {
                  //currentState = BACK_SONAR;
                  //break;
              } else {
                  moveBackward(MOTOR_SPEED, MOTOR_SPEED);
                }
            }
            if (currentState == BOX_FL) {
              currentState = TURN_LEFT;
            }
            break;

        case BACKWARD:
            Serial.println("Case BACKWARD");
            for (unsigned long startTime = millis(); millis() - startTime < 400; ) {
              //if (irFrontLeft == 0 && irFrontRight == 0) {
                //currentState = BACKWARD;
                //break;
              //} else if (irFrontLeft == 0) {
                  //currentState = BACK_AFTER_TURN_RIGHT;
                  //break;
              //} else if (irFrontRight == 0) {
                  //currentState = BACK_AFTER_TURN_LEFT;
                  //break;
              if (irBackLeft == 0 && irBackRight == 0) {
                  currentState = FORWARD;
                  break;
              } else if (irBackLeft == 0) {
                currentState = TURN_LEFT;
                break;
              } else if (irBackRight == 0) {
                currentState = TURN_RIGHT;
                break;
              //} else if (distance < 20) {
                  //currentState = BACK_SONAR;
                  //break;
              } else {
                  moveBackward(MOTOR_SPEED, MOTOR_SPEED);
              }
            }
            if (currentState == BACKWARD) { // Ensure the state didn't change
                currentState = turnLeftFlag ? TURN_LEFT : TURN_RIGHT;
                turnLeftFlag = !turnLeftFlag;
            }
            break;

        case BACK_AFTER_TURN_LEFT:
            Serial.println("Case BACK AFTER TURN LEFT");
            if (turnedLeft && turnedRight) {
              currentState = BACKWARD;
              turnedLeft = false;
              turnedRight = false;
              break;
            }
            for (unsigned long startTime = millis(); millis() - startTime < 400; ) {
                if (irBackLeft == 0 && irBackRight == 0) {
                  currentState = FORWARD;
                  break;
                } else if (irBackLeft == 0) {
                currentState = TURN_LEFT;
                break;
                } else if (irBackRight == 0) {
                currentState = TURN_RIGHT;
                break;
                } else {
                    moveBackward(MOTOR_SPEED, MOTOR_SPEED);
                }
            }
            if (currentState == BACK_AFTER_TURN_LEFT) {
                turnedLeft = true;
                currentState = TURN_LEFT;
               
            }
            break;

        case BACK_AFTER_TURN_RIGHT:
            Serial.println("Case BACK AFTER TURN RIGHT");
            if (turnedLeft && turnedRight) {
              currentState = BACKWARD;
              turnedLeft = false;
              turnedRight = false;
              break;
            }
            for (unsigned long startTime = millis(); millis() - startTime < 400; ) {
                if (irBackLeft == 0 && irBackRight == 0) {
                  currentState = FORWARD;
                  break;
                } else if (irBackLeft == 0) {
                  currentState = TURN_LEFT;
                  break;
                } else if (irBackRight == 0) {
                  currentState = TURN_RIGHT;
                  break;
                } else {
                  moveBackward(MOTOR_SPEED, MOTOR_SPEED);
                }
            }
            if (currentState == BACK_AFTER_TURN_RIGHT) {
              turnedRight = true;
              currentState = TURN_RIGHT;
            }
            break;

        case TURN_LEFT:
              Serial.println("CASE TURN LEFT");
            for (unsigned long startTime = millis(); millis() - startTime < 400; ) {
                if (irFrontLeft == 0 && irFrontRight == 0) {
                  currentState = BACKWARD;
                  break;
                } else if (irFrontLeft == 0) {
                  currentState = BACK_AFTER_TURN_RIGHT;
                  break;
                } else if (irFrontRight == 0) {
                  currentState = BACK_AFTER_TURN_LEFT;
                  break;
                } else if (distance_FRONT < 10) {
                  currentState = BACKWARD;
                  break;
                } else {
                  turnLeft(MOTOR_SPEED+20, MOTOR_SPEED+20);
                }
            }
            if (currentState == TURN_LEFT) {
              currentState = FORWARD;
            }
            break;

        case TURN_RIGHT:
            Serial.println("Case TURN RIGHT");
            for (unsigned long startTime = millis(); millis() - startTime < 400; ) {
                if (irFrontLeft == 0 && irFrontRight == 0) {
                  currentState = BACKWARD;
                  break;
                } else if (irFrontLeft == 0) {
                  currentState = BACK_AFTER_TURN_RIGHT;
                  break;
                } else if (irFrontRight == 0) {
                  currentState = BACK_AFTER_TURN_LEFT;
                  break;
                } else if (distance_FRONT < 10) {
                  currentState = BACKWARD;
                  break;
                } else {
                  turnRight(MOTOR_SPEED+20, MOTOR_SPEED+20);
                }
            }
            if (currentState == TURN_RIGHT) {
              currentState = FORWARD;
            }
            break;

            case ATTACK:
    Serial.print("IN ATTACK CASE");
      SensorUpdate();
    // Nested state machine for ATTACK
    if (balloon_detect) { // Check if balloon is still detected
        Serial.print("ATTACK: Balloon detected, engaging.");
        SensorUpdate();
        myServo.write(forwardAngle);

        switch (currentAttackSubState) {
            case ATTACK_ALIGN: // Centers on the balloon
                multiturnFlag = false;
                Serial.print("ATTACK ALIGN ENGAGED");
                for (unsigned long startTime = millis(); millis() - startTime < 10000;) {
                    SensorUpdate();
                    Serial.print("balloon x is ");
                    Serial.println(balloonX);
                    while (balloonX < 140 && irFrontRight == 1 && irFrontLeft == 1) {
                        // Balloon left, no obstacles
                        Serial.print("Aligning left");
                        turnLeft(MOTOR_SPEED, MOTOR_SPEED);
                        SensorUpdate();
                        if (balloon_detect == false) {break;}
                    }
                    while (balloonX > 180 && irFrontRight == 1 && irFrontLeft == 1) {
                        // Balloon right, no obstacles
                        Serial.print("Aligning right");
                        turnRight(MOTOR_SPEED, MOTOR_SPEED);
                        SensorUpdate();
                        if (balloon_detect == false) {break;}
                    }
                    if (balloonX < 140 && irFrontLeft == 0 || balloonX > 140 && balloonX < 180 && irFrontLeft == 0) {
                        Serial.print("Going to reverse left state"); // Balloon left, obstacle left
                        currentAttackSubState = REVERSE_LEFT;
                        multiturnFlag = true;
                        break;
                    } else if (balloonX < 140 && irFrontRight == 0) {
                        Serial.print("Going to reverse right"); // Balloon left, obstacle right
                        currentAttackSubState = REVERSE_RIGHT;
                        break;
                    } else if (balloonX > 180 && irFrontLeft == 0) { // Balloon right, obstacle left
                        currentAttackSubState = REVERSE_LEFT;
                        Serial.print("Going to reverse left");
                        break;
                    } else if (balloonX > 180 && irFrontRight == 0 || balloonX > 140 && balloonX < 180 && irFrontRight == 0) { // Balloon right, obstacle right
                        currentAttackSubState = REVERSE_RIGHT;
                        Serial.print("Going to reverse right");
                        multiturnFlag = true;
                        break;
                    } else {
                        moveForward(MOTOR_SPEED, MOTOR_SPEED);
                        SensorUpdate(); // Aligned, moving forward
                    }
                }
                if (currentAttackSubState == ATTACK_ALIGN) {
                    currentAttackSubState = turnLeftFlag ? REVERSE_LEFT : REVERSE_RIGHT;
                    turnLeftFlag = !turnLeftFlag;
                }
                break;

            case REVERSE_LEFT: // Robot backs up to the left
                for (unsigned long startTime = millis(); millis() - startTime < 300;) {
                    SensorUpdate();
                    if (irBackLeft == 0 || irBackRight == 0) {
                        currentAttackSubState = ATTACK_ALIGN; // Transition to align if conditions met
                        break;
                    } else {
                        moveBackward(MOTOR_SPEED, MOTOR_SPEED); // Reverse to left
                    }
                }
                if (currentAttackSubState != REVERSE_LEFT) {break;}

                for (unsigned long startTime = millis(); millis() - startTime < 300;) {
                    SensorUpdate();
                    if (irFrontLeft == 0 || irFrontRight == 0) {
                        currentAttackSubState = ATTACK_ALIGN; // Transition to align if conditions met
                        multiturnFlag = false;
                        break;
                    } else {
                        turnRight(MOTOR_SPEED, MOTOR_SPEED);
                    }
                }
                if (currentAttackSubState != REVERSE_LEFT) {break;}

                if (multiturnFlag) {
                    for (unsigned long startTime = millis(); millis() - startTime < 200;) {
                        SensorUpdate();
                        if (irFrontLeft == 0 || irFrontRight == 0) {
                            currentAttackSubState = ATTACK_ALIGN; // Transition to align if conditions met
                            multiturnFlag = false;
                            break;
                        } else {
                            moveForward(MOTOR_SPEED, MOTOR_SPEED);
                        }
                    }
                }
                if (currentAttackSubState != REVERSE_LEFT) {break;}

                if (multiturnFlag) {
                    for (unsigned long startTime = millis(); millis() - startTime < 300;) {
                        SensorUpdate();
                        if (irFrontLeft == 0 || irFrontRight == 0) {
                            currentAttackSubState = ATTACK_ALIGN; // Transition to align if conditions met
                            multiturnFlag = false;
                            break;
                        } else {
                            turnLeft(MOTOR_SPEED, MOTOR_SPEED);
                        }
                    }
                    currentAttackSubState = ATTACK_ALIGN;
                    multiturnFlag = false;
                }
                break;

            case REVERSE_RIGHT: // Robot backs up to the right
                for (unsigned long startTime = millis(); millis() - startTime < 300;) {
                    SensorUpdate();
                    if (irBackLeft == 0 || irBackRight == 0) {
                        currentAttackSubState = ATTACK_ALIGN; // Transition to align if conditions met
                        break;
                    } else {
                        moveBackward(MOTOR_SPEED, MOTOR_SPEED); // Reverse to the right
                    }
                }
                if (currentAttackSubState != REVERSE_RIGHT) {break;}

                for (unsigned long startTime = millis(); millis() - startTime < 300;) {
                    SensorUpdate();
                    if (irFrontLeft == 0 || irFrontRight == 0) {
                        currentAttackSubState = ATTACK_ALIGN; // Transition to align if conditions met
                        multiturnFlag = false;
                        break;
                    } else {
                        turnLeft(MOTOR_SPEED, MOTOR_SPEED);
                    }
                }
                if (currentAttackSubState != REVERSE_RIGHT) {break;}

                if (multiturnFlag) {
                    for (unsigned long startTime = millis(); millis() - startTime < 200;) {
                        SensorUpdate();
                        if (irFrontLeft == 0 || irFrontRight == 0) {
                            currentAttackSubState = ATTACK_ALIGN; // Transition to align if conditions met
                            multiturnFlag = false;
                            break;
                        } else {
                            moveForward(MOTOR_SPEED, MOTOR_SPEED);
                        }
                    }
                }
                if (currentAttackSubState != REVERSE_RIGHT) {break;}

                if (multiturnFlag) {
                    for (unsigned long startTime = millis(); millis() - startTime < 300;) {
                        SensorUpdate();
                        if (irFrontLeft == 0 || irFrontRight == 0) {
                            currentAttackSubState = ATTACK_ALIGN; // Transition to align if conditions met
                            multiturnFlag = false;
                            break;
                        } else {
                            turnRight(MOTOR_SPEED, MOTOR_SPEED);
                        }
                    }
                    currentAttackSubState = ATTACK_ALIGN;
                    multiturnFlag = false;
                }
                break;
        }
    } else {
        // Balloon lost: Exit ATTACK state
        Serial.print("ATTACK: Balloon lost, exiting.");
        currentState = FORWARD;
        myServo.write(backwardAngle);
        currentAttackSubState = ATTACK_ALIGN;
    }
    break;

                 
        default:
          Serial.println("IN DEFAULT");
          currentState = FORWARD;
          break;
    }          
  }
